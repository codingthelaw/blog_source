#download the contents of directory codes
url1  <- "http://api.epdb.eu"
path1 <- "eurlex/directory_code"
unicode.result <- GET(url = url1, path = path1)
# enter a stop command on error
if (unicode.result$status_code != 200) {stop("Network Error, please check your internet connection")}
# transforming it from unicode format to a clean dataframe with only the dir codes we want
transformed_content <- fromJSON(rawToChar(unicode.result$content))
directorycodes.df <- do.call(rbind.data.frame, transformed_content)   # prblem with 02, the zero causes the shit
selected.df <- grep(symb, directorycodes.df$directory_code)
selected_data.df <- directorycodes.df[selected.df,]
# In order to use the api we need a list with only the directoty codes
only_relevant_data.df <- selected_data.df$directory_code
#Retrieving energy documents meta data
only_relevant_data <- as.list(only_relevant_data.df)
# name each list element as "dc" in order to get the API working
# name every element as "dc"
for (i in 1:length(only_relevant_data)) {
names(only_relevant_data)[i] <- "dc"
}
#Now we can download through the api the whole selected folder of related legal documents
selected_data_complete <- list()  # intialize a list to store the results
for (i in 1:length(only_relevant_data)) {
temp <- GET(url = url1, path = path1, query = only_relevant_data[i] )
store <- fromJSON(rawToChar(temp$content))  # now we have  a list to store
selected_data_complete[[i]] <- store
Sys.sleep(time = 1)
}
#We will use another "for loop" to extract only the data we want to keep in a new dataframe
#First we have to create the data.frame to host the data and a temporary data frame inside the loop
# final_results.df <- data.frame(Doc_id = character(),
#                                Form = character(),
#                                Date = character(),
#                                stringsAsFactors = FALSE)
storeList <- list()
# the for loop  in order to keep only $doc_id // $form / $ of_effect
for (i in 1:length(selected_data_complete)) {
temp.df <- data.frame(Doc_id = character(),
Form = character(),
Date = character(),
stringsAsFactors = FALSE)
for (k in 1:length(selected_data_complete[[i]])) {
if (length(selected_data_complete[[i]][[k]]) == 19 ) {
temp.df[k,] <- c(selected_data_complete[[i]][[k]][["doc_id"]],       # a bit messy :(
selected_data_complete[[i]][[k]][["form"]],
selected_data_complete[[i]][[k]][["of_effect"]])
}
}
#browser()  # for debugging purposes
storeList[[i]] <- temp.df   # store the results in a list
}
## Visualizing with ggplot ##
final.df <- do.call(rbind.data.frame, storeList)   # create a data frame with the results
## format the variables
final.df[["Doc_id"]] <- as.numeric(final.df[["Doc_id"]])
final.df[["Form"]] <- as.factor(final.df[["Form"]])
final.df[["Date"]] <- as.Date(final.df[["Date"]], format = '%Y-%m-%d')
# create a new factor variable for legal status
legalForms <- c("Regulation","Guideline","Decision","Recommendation","Opinion")
final.df[["legal_Status"]] <- ifelse(final.df[["Form"]] %in% legalForms,"Legal_Act","Non_Legal_Act")
final.df[["legal_Status"]] <- as.factor(final.df[["legal_Status"]])
## Plot Legal Acts in the selected sector ##
selected_plot <-  final.df %>% subset(final.df[["legal_Status"]] == "Legal_Act") %>%
ggplot(.,aes(x= .$Form)) + geom_bar()
return(selected_plot)
}
## user defined function for eurlex API ####
# The function will only take one argument, the number of the direcotry code
#load libraries
library(httr) ; library(jsonlite) ; library(magrittr) ; require(ggplot2)
options(stringsAsFactors = FALSE)
lex_perfecta <- function(x){
# function input validation
if (!(x %in% 1:20)) {stop("Please enter a valid Directory Code from 01 to 20!")}
# a simple if else function so we can avoid typing the function input as text
#symb <- paste0("^",x, sep = 0)
If (x>=10) {
symb <- paste0("^",x)
}
else
symb <- paste("^0",x)
#download the contents of directory codes
url1  <- "http://api.epdb.eu"
path1 <- "eurlex/directory_code"
unicode.result <- GET(url = url1, path = path1)
# enter a stop command on error
if (unicode.result$status_code != 200) {stop("Network Error, please check your internet connection")}
# transforming it from unicode format to a clean dataframe with only the dir codes we want
transformed_content <- fromJSON(rawToChar(unicode.result$content))
directorycodes.df <- do.call(rbind.data.frame, transformed_content)   # prblem with 02, the zero causes the shit
selected.df <- grep(symb, directorycodes.df$directory_code)
selected_data.df <- directorycodes.df[selected.df,]
# In order to use the api we need a list with only the directoty codes
only_relevant_data.df <- selected_data.df$directory_code
#Retrieving energy documents meta data
only_relevant_data <- as.list(only_relevant_data.df)
# name each list element as "dc" in order to get the API working
# name every element as "dc"
for (i in 1:length(only_relevant_data)) {
names(only_relevant_data)[i] <- "dc"
}
#Now we can download through the api the whole selected folder of related legal documents
selected_data_complete <- list()  # intialize a list to store the results
for (i in 1:length(only_relevant_data)) {
temp <- GET(url = url1, path = path1, query = only_relevant_data[i] )
store <- fromJSON(rawToChar(temp$content))  # now we have  a list to store
selected_data_complete[[i]] <- store
Sys.sleep(time = 1)
}
#We will use another "for loop" to extract only the data we want to keep in a new dataframe
#First we have to create the data.frame to host the data and a temporary data frame inside the loop
# final_results.df <- data.frame(Doc_id = character(),
#                                Form = character(),
#                                Date = character(),
#                                stringsAsFactors = FALSE)
storeList <- list()
# the for loop  in order to keep only $doc_id // $form / $ of_effect
for (i in 1:length(selected_data_complete)) {
temp.df <- data.frame(Doc_id = character(),
Form = character(),
Date = character(),
stringsAsFactors = FALSE)
for (k in 1:length(selected_data_complete[[i]])) {
if (length(selected_data_complete[[i]][[k]]) == 19 ) {
temp.df[k,] <- c(selected_data_complete[[i]][[k]][["doc_id"]],       # a bit messy :(
selected_data_complete[[i]][[k]][["form"]],
selected_data_complete[[i]][[k]][["of_effect"]])
}
}
#browser()  # for debugging purposes
storeList[[i]] <- temp.df   # store the results in a list
}
## Visualizing with ggplot ##
final.df <- do.call(rbind.data.frame, storeList)   # create a data frame with the results
## format the variables
final.df[["Doc_id"]] <- as.numeric(final.df[["Doc_id"]])
final.df[["Form"]] <- as.factor(final.df[["Form"]])
final.df[["Date"]] <- as.Date(final.df[["Date"]], format = '%Y-%m-%d')
# create a new factor variable for legal status
legalForms <- c("Regulation","Guideline","Decision","Recommendation","Opinion")
final.df[["legal_Status"]] <- ifelse(final.df[["Form"]] %in% legalForms,"Legal_Act","Non_Legal_Act")
final.df[["legal_Status"]] <- as.factor(final.df[["legal_Status"]])
## Plot Legal Acts in the selected sector ##
selected_plot <-  final.df %>% subset(final.df[["legal_Status"]] == "Legal_Act") %>%
ggplot(.,aes(x= .$Form)) + geom_bar()
return(selected_plot)
}
## user defined function for eurlex API ####
# The function will only take one argument, the number of the direcotry code
#load libraries
library(httr) ; library(jsonlite) ; library(magrittr) ; require(ggplot2)
options(stringsAsFactors = FALSE)
lex_perfecta <- function(x){
# function input validation
if (!(x %in% 1:20)) {stop("Please enter a valid Directory Code from 01 to 20!")}
# a simple if else function so we can avoid typing the function input as text
#symb <- paste0("^",x, sep = 0)
If (x >= 10) {
symb <- paste0("^",x)
}
else {
symb <- paste("^0",x)
}
#download the contents of directory codes
url1  <- "http://api.epdb.eu"
path1 <- "eurlex/directory_code"
unicode.result <- GET(url = url1, path = path1)
# enter a stop command on error
if (unicode.result$status_code != 200) {stop("Network Error, please check your internet connection")}
# transforming it from unicode format to a clean dataframe with only the dir codes we want
transformed_content <- fromJSON(rawToChar(unicode.result$content))
directorycodes.df <- do.call(rbind.data.frame, transformed_content)   # prblem with 02, the zero causes the shit
selected.df <- grep(symb, directorycodes.df$directory_code)
selected_data.df <- directorycodes.df[selected.df,]
# In order to use the api we need a list with only the directoty codes
only_relevant_data.df <- selected_data.df$directory_code
#Retrieving energy documents meta data
only_relevant_data <- as.list(only_relevant_data.df)
# name each list element as "dc" in order to get the API working
# name every element as "dc"
for (i in 1:length(only_relevant_data)) {
names(only_relevant_data)[i] <- "dc"
}
#Now we can download through the api the whole selected folder of related legal documents
selected_data_complete <- list()  # intialize a list to store the results
for (i in 1:length(only_relevant_data)) {
temp <- GET(url = url1, path = path1, query = only_relevant_data[i] )
store <- fromJSON(rawToChar(temp$content))  # now we have  a list to store
selected_data_complete[[i]] <- store
Sys.sleep(time = 1)
}
#We will use another "for loop" to extract only the data we want to keep in a new dataframe
#First we have to create the data.frame to host the data and a temporary data frame inside the loop
# final_results.df <- data.frame(Doc_id = character(),
#                                Form = character(),
#                                Date = character(),
#                                stringsAsFactors = FALSE)
storeList <- list()
# the for loop  in order to keep only $doc_id // $form / $ of_effect
for (i in 1:length(selected_data_complete)) {
temp.df <- data.frame(Doc_id = character(),
Form = character(),
Date = character(),
stringsAsFactors = FALSE)
for (k in 1:length(selected_data_complete[[i]])) {
if (length(selected_data_complete[[i]][[k]]) == 19 ) {
temp.df[k,] <- c(selected_data_complete[[i]][[k]][["doc_id"]],       # a bit messy :(
selected_data_complete[[i]][[k]][["form"]],
selected_data_complete[[i]][[k]][["of_effect"]])
}
}
#browser()  # for debugging purposes
storeList[[i]] <- temp.df   # store the results in a list
}
## Visualizing with ggplot ##
final.df <- do.call(rbind.data.frame, storeList)   # create a data frame with the results
## format the variables
final.df[["Doc_id"]] <- as.numeric(final.df[["Doc_id"]])
final.df[["Form"]] <- as.factor(final.df[["Form"]])
final.df[["Date"]] <- as.Date(final.df[["Date"]], format = '%Y-%m-%d')
# create a new factor variable for legal status
legalForms <- c("Regulation","Guideline","Decision","Recommendation","Opinion")
final.df[["legal_Status"]] <- ifelse(final.df[["Form"]] %in% legalForms,"Legal_Act","Non_Legal_Act")
final.df[["legal_Status"]] <- as.factor(final.df[["legal_Status"]])
## Plot Legal Acts in the selected sector ##
selected_plot <-  final.df %>% subset(final.df[["legal_Status"]] == "Legal_Act") %>%
ggplot(.,aes(x= .$Form)) + geom_bar()
return(selected_plot)
}
test <- function(x){
If (x >= 10) {
symb <- paste0("^",x)
}
else {
symb <- paste("^0",x)
}
return(x)
}
test <- function(x){
If (x >= 10) {
symb <- paste0("^",x)
}
else {
symb <- paste("^0",x) }
return(symb)
}
test <- function(x){
If (x >= 10) {
symb <- paste0("^",x)
}
else {
symb <- paste("^0",x) }
return(symb) }
test <- function(x){
If (x >= 10) { symb <- paste0("^",x)}
else {symb <- paste("^0",x) }
return(symb) }
test <- function(x){
If (x >= 10)  symb <- paste0("^",x)
else symb <- paste("^0",x)
return(symb) }
test <- function(x){
If (x >= 10)  symb <- paste0("^",x)
else symb <- paste("^0",x)
return(symb)
}
test <- function(x) {
If (x >= 10)
symb <- paste0("^",x)
else
symb <- paste("^0",x)
return(symb)
}
test <- function(x) {
If (x >= 10)   symb <- paste0("^",x) else
symb <- paste("^0",x)
return(symb)
}
if (2==1) {
print("1")
} else if (2==2) {
print("2")
} else {
print("3")
}
test <- function(x) {
if (x >= 10)   symb <- paste0("^",x) else
symb <- paste("^0",x)
return(symb)
}
test(11)
test(3)
test(03)
test(3)
test <- function(x) {
if (x >= 10)   symb <- paste0("^",x) else
symb <- paste0("^0",x)
return(symb)
}
test(3)
symb <- paste0("^0",x)
## user defined function for eurlex API ####
# The function will only take one argument, the number of the direcotry code
#load libraries
library(httr) ; library(jsonlite) ; library(magrittr) ; require(ggplot2)
options(stringsAsFactors = FALSE)
lex_perfecta <- function(x){
# function input validation
if (!(x %in% 1:20)) {stop("Please enter a valid Directory Code from 01 to 20!")}
# a simple if else function so we can avoid typing the function input as text
#symb <- paste0("^",x, sep = 0)
if (x >= 10)   symb <- paste0("^",x) else
symb <- paste0("^0",x)
#download the contents of directory codes
url1  <- "http://api.epdb.eu"
path1 <- "eurlex/directory_code"
unicode.result <- GET(url = url1, path = path1)
# enter a stop command on error
if (unicode.result$status_code != 200) {stop("Network Error, please check your internet connection")}
# transforming it from unicode format to a clean dataframe with only the dir codes we want
transformed_content <- fromJSON(rawToChar(unicode.result$content))
directorycodes.df <- do.call(rbind.data.frame, transformed_content)   # prblem with 02, the zero causes the shit
selected.df <- grep(symb, directorycodes.df$directory_code)
selected_data.df <- directorycodes.df[selected.df,]
# In order to use the api we need a list with only the directoty codes
only_relevant_data.df <- selected_data.df$directory_code
#Retrieving energy documents meta data
only_relevant_data <- as.list(only_relevant_data.df)
# name each list element as "dc" in order to get the API working
# name every element as "dc"
for (i in 1:length(only_relevant_data)) {
names(only_relevant_data)[i] <- "dc"
}
#Now we can download through the api the whole selected folder of related legal documents
selected_data_complete <- list()  # intialize a list to store the results
for (i in 1:length(only_relevant_data)) {
temp <- GET(url = url1, path = path1, query = only_relevant_data[i] )
store <- fromJSON(rawToChar(temp$content))  # now we have  a list to store
selected_data_complete[[i]] <- store
Sys.sleep(time = 1)
}
#We will use another "for loop" to extract only the data we want to keep in a new dataframe
#First we have to create the data.frame to host the data and a temporary data frame inside the loop
# final_results.df <- data.frame(Doc_id = character(),
#                                Form = character(),
#                                Date = character(),
#                                stringsAsFactors = FALSE)
storeList <- list()
# the for loop  in order to keep only $doc_id // $form / $ of_effect
for (i in 1:length(selected_data_complete)) {
temp.df <- data.frame(Doc_id = character(),
Form = character(),
Date = character(),
stringsAsFactors = FALSE)
for (k in 1:length(selected_data_complete[[i]])) {
if (length(selected_data_complete[[i]][[k]]) == 19 ) {
temp.df[k,] <- c(selected_data_complete[[i]][[k]][["doc_id"]],       # a bit messy :(
selected_data_complete[[i]][[k]][["form"]],
selected_data_complete[[i]][[k]][["of_effect"]])
}
}
#browser()  # for debugging purposes
storeList[[i]] <- temp.df   # store the results in a list
}
## Visualizing with ggplot ##
final.df <- do.call(rbind.data.frame, storeList)   # create a data frame with the results
## format the variables
final.df[["Doc_id"]] <- as.numeric(final.df[["Doc_id"]])
final.df[["Form"]] <- as.factor(final.df[["Form"]])
final.df[["Date"]] <- as.Date(final.df[["Date"]], format = '%Y-%m-%d')
# create a new factor variable for legal status
legalForms <- c("Regulation","Guideline","Decision","Recommendation","Opinion")
final.df[["legal_Status"]] <- ifelse(final.df[["Form"]] %in% legalForms,"Legal_Act","Non_Legal_Act")
final.df[["legal_Status"]] <- as.factor(final.df[["legal_Status"]])
## Plot Legal Acts in the selected sector ##
selected_plot <-  final.df %>% subset(final.df[["legal_Status"]] == "Legal_Act") %>%
ggplot(.,aes(x= .$Form)) + geom_bar()
return(selected_plot)
}
lex_perfecta(11)
lex_perfecta(04)
return(selected_plot)
## user defined function for eurlex API ####
# The function will only take one argument, the number of the direcotry code
#load libraries
library(httr) ; library(jsonlite) ; library(magrittr) ; require(ggplot2)
options(stringsAsFactors = FALSE)
lex_perfecta <- function(x){
# function input validation
if (!(x %in% 1:20)) {stop("Please enter a valid Directory Code from 01 to 20!")}
# a simple if else function so we can avoid typing the function input as text
#symb <- paste0("^",x, sep = 0)
if (x >= 10)   symb <- paste0("^",x) else
symb <- paste0("^0",x)
#download the contents of directory codes
url1  <- "http://api.epdb.eu"
path1 <- "eurlex/directory_code"
unicode.result <- GET(url = url1, path = path1)
# enter a stop command on error
if (unicode.result$status_code != 200) {stop("Network Error, please check your internet connection")}
# transforming it from unicode format to a clean dataframe with only the dir codes we want
transformed_content <- fromJSON(rawToChar(unicode.result$content))
directorycodes.df <- do.call(rbind.data.frame, transformed_content)   # prblem with 02, the zero causes the shit
selected.df <- grep(symb, directorycodes.df$directory_code)
selected_data.df <- directorycodes.df[selected.df,]
# In order to use the api we need a list with only the directoty codes
only_relevant_data.df <- selected_data.df$directory_code
#Retrieving energy documents meta data
only_relevant_data <- as.list(only_relevant_data.df)
# name each list element as "dc" in order to get the API working
# name every element as "dc"
for (i in 1:length(only_relevant_data)) {
names(only_relevant_data)[i] <- "dc"
}
#Now we can download through the api the whole selected folder of related legal documents
selected_data_complete <- list()  # intialize a list to store the results
for (i in 1:length(only_relevant_data)) {
temp <- GET(url = url1, path = path1, query = only_relevant_data[i] )
store <- fromJSON(rawToChar(temp$content))  # now we have  a list to store
selected_data_complete[[i]] <- store
Sys.sleep(time = 1)
}
#We will use another "for loop" to extract only the data we want to keep in a new dataframe
#First we have to create the data.frame to host the data and a temporary data frame inside the loop
# final_results.df <- data.frame(Doc_id = character(),
#                                Form = character(),
#                                Date = character(),
#                                stringsAsFactors = FALSE)
storeList <- list()
# the for loop  in order to keep only $doc_id // $form / $ of_effect
for (i in 1:length(selected_data_complete)) {
temp.df <- data.frame(Doc_id = character(),
Form = character(),
Date = character(),
stringsAsFactors = FALSE)
for (k in 1:length(selected_data_complete[[i]])) {
if (length(selected_data_complete[[i]][[k]]) == 19 ) {
temp.df[k,] <- c(selected_data_complete[[i]][[k]][["doc_id"]],       # a bit messy :(
selected_data_complete[[i]][[k]][["form"]],
selected_data_complete[[i]][[k]][["of_effect"]])
}
}
#browser()  # for debugging purposes
storeList[[i]] <- temp.df   # store the results in a list
}
## Visualizing with ggplot ##
final.df <- do.call(rbind.data.frame, storeList)   # create a data frame with the results
## format the variables
final.df[["Doc_id"]] <- as.numeric(final.df[["Doc_id"]])
final.df[["Form"]] <- as.factor(final.df[["Form"]])
final.df[["Date"]] <- as.Date(final.df[["Date"]], format = '%Y-%m-%d')
# create a new factor variable for legal status
legalForms <- c("Regulation","Guideline","Decision","Recommendation","Opinion")
final.df[["legal_Status"]] <- ifelse(final.df[["Form"]] %in% legalForms,"Legal_Act","Non_Legal_Act")
final.df[["legal_Status"]] <- as.factor(final.df[["legal_Status"]])
## Plot Legal Acts in the selected sector ##
selected_plot <-  final.df %>% subset(final.df[["legal_Status"]] == "Legal_Act") %>%
ggplot(.,aes(x= .$Form)) + geom_bar(fill = "cyan") +
labs(title = "EU") +
xlab("test") +
ylab("Number")
return(selected_plot)
}
lex_perfecta(09)
library(httr) ; library(jsonlite) ; library(magrittr) ; require(ggplot2)
options(stringsAsFactors = FALSE)
url  <- "http://api.epdb.eu"
path <- "eurlex/directory_code"
raw.result <- GET(url = url, path = path)
# check the status code it should be 200
raw.result$status_code
head(raw.result$content) # returns result in unicode
final_content <- fromJSON(rawToChar(raw.result$content))
# now we have a huge list with sublists, its better to turn it to a dataframe
df1 <- do.call(rbind.data.frame, final_content)
monetary_df <- grep("^10", df1[["directory_code"]])
# subsetting only the code 10 about economic and monetary policy
monetary_data <- df1[monetary_df,]
# keep only the directory codes
relevant_data <- monetary_data[["directory_code"]]
#Retrieving energy documents meta data
relevant_data <- as.list(relevant_data)
for (i in 1:length(relevant_data)) {
names(relevant_data)[i] <- "dc"
}
relevant_data[[1]]
relevant_data[1]
View(relevant_data)
mon_data_complete <- list()  # intialize a list to store the results
for (i in 1:length(relevant_data)) {
temp <- GET(url = url, path = path, query = relevant_data[i] )
store <- fromJSON(rawToChar(temp$content))  # now we have  a list to store
mon_data_complete[[i]] <- store
Sys.sleep(time = 1)
}
View(mon_data_complete)
View(mon_data_complete)
mon_data_complete[[11]]
mon_data_complete[[11]][[]]
mon_data_complete[[11]]$`265207`$form
names(mon_data_complete)
names(mon_data_complete[[1]])
names(mon_data_complete[[1]][[1]])
res$url
temp$url
setwd("c:/users/difst/desktop/github/blog_source")
setwd("c:/users/dfist/desktop/github/blog_source")\
setwd("c:/users/dfist/desktop/github/blog_source")
blogdown:::serve_site()
blogdown:::serve_site()
ervr::daemon_stop("228166504")
servr::daemon_stop("228166504")
